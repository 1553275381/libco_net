
headers:
#include <sys/socket.h>

int shutdown(int sockfd, int how);

how:
SHUT_RD:   1) 关闭 sockfd 读端，若关闭后继续读则读到文件尾(0)
		   2) 对于可移植的 tcp 应用来说，应该避免使用 SHUT_RD，因为不同的操作系统对 SHUT_RD 的实现各有不同
		   		1. linux 以及一些其他的实现在执行 SHUT_RD 后，read 将返回文件尾(0)，但如果对端继续写该 sockfd 时，本地套接字仍然可以读取到数据
		   		2. 其他实现，比如 BSD 上，同样执行 SHUT_RD 后，后续的 read 继续返回文件尾(0)，但对端继续 write 后，知道本地内核缓冲填满，对端的 write 被阻塞
		
SHUT_WR:   1) 关闭 sockfd 写端，后续对 sockfd 的写操作将导致 SIGPIPE 信号错误以及 EPIPE 错误
           2) 由对端写入的数据仍可以在 sockfd 上读取
		   3) SHUT_WR 最常用到，有时被称为 半关闭套接字

SHUT_RDWR: 1) 等同于先执行 SHUT_RD ，再执行 SHUT_WR
		   2) 和 close 区别是，不论该套接字是否关联其他描述符，shutdown 都会关闭通道

------------------------------------------------------------------------------------------------------------

1) 假如 sockfd 是已连接套接字，如果执行下列操作，连接依然保持打开：
   fd2 = dup(sockfd);
   close(sockfd);

2) 但如果执行下列操作，连接的双向管道都会关闭，通过 fd2 也无法再执行IO操作了
   fd2 = dup(sockfd);
   shutdown(sockfd, SHUT_RDWR);

3) sockfd 在被 fork 时被复制，如果一个进程在 sockfd 副本上执行 SHUT_RDWR，其他进程就无法在这个 sockfd 上执行 IO 操作了

4) 需要注意的是：shutdown 并不会关闭文件描述符，它关闭的只是通道，就算指定 SHUT_RDWR 也是如此。要关闭描述符，必须调用 close

------------------------------------------------------------------------------------------------------------

