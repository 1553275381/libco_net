fork 创建子进程
fork出的子进程会复制父进程的（文本段，数据段（已初始化段，未初始化段），堆区，栈区）以及文件描述符

fork的返回值如果 > 0，则是父进程
               = 0，则是子进程


nginx创建master，slave模式下的进程模型
for(int i = 0; i < cpu_num; i++)
{
	pid_t pid = fork();
	switch(pid)
	{
		case -1:
			printf("fork failed, errno msg:%s\n", strerrno(errno));
			break;
		case 0:
			printf("子进程\n");
			while(1)
			{
				sleep(3);
			}
			break;
		/* 父进程直接跳出该switch后继续执行for循环继续fork出下一个子进程 */
		default:
			break;
	}
}

printf("父进程\n");
while(1)
{
	sleep(3);
}

最终的进程数是 cpu_num + 1

--------------------------------------------------------------------------------------------------------------------------------

for (int i = 0; i < 2; ++i)
{
	fork();
	// printf("-\n"); /* 6个 - */
	// printf("-");   /* 8个 - */

	wait(NULL);
	wait(NULL);

	return 0;
}

因为 printf 是行缓冲，fork之后子进程会复制父进程的缓冲区，如果每次fork后不及时打印printf，则下一次fork会复制上一次的缓冲区